/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ErrorModel,
  HTTPValidationError,
  UserRead,
  UserUpdate
} from '../../model'
import { customInstance } from '../../../api/axios';
import type { ErrorType } from '../../../api/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Users:Current User
 */
export const usersCurrentUserApiV1UsersMeGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserRead>(
      {url: `/api/v1/users/me`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersCurrentUserApiV1UsersMeGetQueryKey = () => {
    return [`/api/v1/users/me`] as const;
    }

    
export const getUsersCurrentUserApiV1UsersMeGetQueryOptions = <TData = Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersCurrentUserApiV1UsersMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>> = ({ signal }) => usersCurrentUserApiV1UsersMeGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type UsersCurrentUserApiV1UsersMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>>
export type UsersCurrentUserApiV1UsersMeGetQueryError = ErrorType<void>


export function useUsersCurrentUserApiV1UsersMeGet<TData = Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError = ErrorType<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersCurrentUserApiV1UsersMeGet<TData = Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersCurrentUserApiV1UsersMeGet<TData = Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Users:Current User
 */

export function useUsersCurrentUserApiV1UsersMeGet<TData = Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getUsersCurrentUserApiV1UsersMeGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Users:Patch Current User
 */
export const usersPatchCurrentUserApiV1UsersMePatch = (
    userUpdate: UserUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserRead>(
      {url: `/api/v1/users/me`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      options);
    }
  


export const getUsersPatchCurrentUserApiV1UsersMePatchMutationOptions = <TError = ErrorType<ErrorModel | void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>, TError,{data: UserUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>, TError,{data: UserUpdate}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>, {data: UserUpdate}> = (props) => {
          const {data} = props ?? {};

          return  usersPatchCurrentUserApiV1UsersMePatch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersPatchCurrentUserApiV1UsersMePatchMutationResult = NonNullable<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>>
    export type UsersPatchCurrentUserApiV1UsersMePatchMutationBody = UserUpdate
    export type UsersPatchCurrentUserApiV1UsersMePatchMutationError = ErrorType<ErrorModel | void | HTTPValidationError>

    /**
 * @summary Users:Patch Current User
 */
export const useUsersPatchCurrentUserApiV1UsersMePatch = <TError = ErrorType<ErrorModel | void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>, TError,{data: UserUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>,
        TError,
        {data: UserUpdate},
        TContext
      > => {

      const mutationOptions = getUsersPatchCurrentUserApiV1UsersMePatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Users:User
 */
export const usersUserApiV1UsersIdGet = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserRead>(
      {url: `/api/v1/users/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersUserApiV1UsersIdGetQueryKey = (id: string,) => {
    return [`/api/v1/users/${id}`] as const;
    }

    
export const getUsersUserApiV1UsersIdGetQueryOptions = <TData = Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError = ErrorType<void | HTTPValidationError>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersUserApiV1UsersIdGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>> = ({ signal }) => usersUserApiV1UsersIdGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type UsersUserApiV1UsersIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>>
export type UsersUserApiV1UsersIdGetQueryError = ErrorType<void | HTTPValidationError>


export function useUsersUserApiV1UsersIdGet<TData = Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError = ErrorType<void | HTTPValidationError>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersUserApiV1UsersIdGet<TData = Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError = ErrorType<void | HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersUserApiV1UsersIdGet<TData = Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError = ErrorType<void | HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Users:User
 */

export function useUsersUserApiV1UsersIdGet<TData = Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError = ErrorType<void | HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getUsersUserApiV1UsersIdGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Users:Patch User
 */
export const usersPatchUserApiV1UsersIdPatch = (
    id: string,
    userUpdate: UserUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserRead>(
      {url: `/api/v1/users/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      options);
    }
  


export const getUsersPatchUserApiV1UsersIdPatchMutationOptions = <TError = ErrorType<ErrorModel | void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>, TError,{id: string;data: UserUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>, TError,{id: string;data: UserUpdate}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>, {id: string;data: UserUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  usersPatchUserApiV1UsersIdPatch(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersPatchUserApiV1UsersIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>>
    export type UsersPatchUserApiV1UsersIdPatchMutationBody = UserUpdate
    export type UsersPatchUserApiV1UsersIdPatchMutationError = ErrorType<ErrorModel | void | HTTPValidationError>

    /**
 * @summary Users:Patch User
 */
export const useUsersPatchUserApiV1UsersIdPatch = <TError = ErrorType<ErrorModel | void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>, TError,{id: string;data: UserUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>,
        TError,
        {id: string;data: UserUpdate},
        TContext
      > => {

      const mutationOptions = getUsersPatchUserApiV1UsersIdPatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Users:Delete User
 */
export const usersDeleteUserApiV1UsersIdDelete = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/users/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getUsersDeleteUserApiV1UsersIdDeleteMutationOptions = <TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  usersDeleteUserApiV1UsersIdDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersDeleteUserApiV1UsersIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>>
    
    export type UsersDeleteUserApiV1UsersIdDeleteMutationError = ErrorType<void | HTTPValidationError>

    /**
 * @summary Users:Delete User
 */
export const useUsersDeleteUserApiV1UsersIdDelete = <TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getUsersDeleteUserApiV1UsersIdDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    