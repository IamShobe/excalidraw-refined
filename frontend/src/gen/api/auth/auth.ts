/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BodyAuthJwtcookieLoginApiV1AuthJwtLoginPost,
  BodyResetForgotPasswordApiV1AuthForgotPasswordPost,
  BodyResetResetPasswordApiV1AuthResetPasswordPost,
  BodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost,
  BodyVerifyVerifyApiV1AuthVerifyPost,
  ErrorModel,
  HTTPValidationError,
  OAuth2AuthorizeResponse,
  OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetParams,
  OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetParams,
  UserCreate,
  UserRead
} from '../../model'
import { customInstance } from '../../../api/axios';
import type { ErrorType } from '../../../api/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Auth:Jwtcookie.Login
 */
export const authJwtcookieLoginApiV1AuthJwtLoginPost = (
    bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost: BodyAuthJwtcookieLoginApiV1AuthJwtLoginPost,
 options?: SecondParameter<typeof customInstance>,) => {
      
      const formUrlEncoded = new URLSearchParams();
if(bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.grant_type !== undefined) {
 formUrlEncoded.append('grant_type', bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.grant_type)
 }
formUrlEncoded.append('username', bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.username)
formUrlEncoded.append('password', bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.password)
if(bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.scope !== undefined) {
 formUrlEncoded.append('scope', bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.scope)
 }
if(bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.client_id !== undefined) {
 formUrlEncoded.append('client_id', bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.client_id)
 }
if(bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.client_secret !== undefined) {
 formUrlEncoded.append('client_secret', bodyAuthJwtcookieLoginApiV1AuthJwtLoginPost.client_secret)
 }

      return customInstance<unknown | void>(
      {url: `/api/v1/auth/jwt/login`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
      options);
    }
  


export const getAuthJwtcookieLoginApiV1AuthJwtLoginPostMutationOptions = <TError = ErrorType<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authJwtcookieLoginApiV1AuthJwtLoginPost>>, TError,{data: BodyAuthJwtcookieLoginApiV1AuthJwtLoginPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authJwtcookieLoginApiV1AuthJwtLoginPost>>, TError,{data: BodyAuthJwtcookieLoginApiV1AuthJwtLoginPost}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authJwtcookieLoginApiV1AuthJwtLoginPost>>, {data: BodyAuthJwtcookieLoginApiV1AuthJwtLoginPost}> = (props) => {
          const {data} = props ?? {};

          return  authJwtcookieLoginApiV1AuthJwtLoginPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthJwtcookieLoginApiV1AuthJwtLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof authJwtcookieLoginApiV1AuthJwtLoginPost>>>
    export type AuthJwtcookieLoginApiV1AuthJwtLoginPostMutationBody = BodyAuthJwtcookieLoginApiV1AuthJwtLoginPost
    export type AuthJwtcookieLoginApiV1AuthJwtLoginPostMutationError = ErrorType<ErrorModel | HTTPValidationError>

    /**
 * @summary Auth:Jwtcookie.Login
 */
export const useAuthJwtcookieLoginApiV1AuthJwtLoginPost = <TError = ErrorType<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authJwtcookieLoginApiV1AuthJwtLoginPost>>, TError,{data: BodyAuthJwtcookieLoginApiV1AuthJwtLoginPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof authJwtcookieLoginApiV1AuthJwtLoginPost>>,
        TError,
        {data: BodyAuthJwtcookieLoginApiV1AuthJwtLoginPost},
        TContext
      > => {

      const mutationOptions = getAuthJwtcookieLoginApiV1AuthJwtLoginPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Auth:Jwtcookie.Logout
 */
export const authJwtcookieLogoutApiV1AuthJwtLogoutPost = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown | void>(
      {url: `/api/v1/auth/jwt/logout`, method: 'POST'
    },
      options);
    }
  


export const getAuthJwtcookieLogoutApiV1AuthJwtLogoutPostMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authJwtcookieLogoutApiV1AuthJwtLogoutPost>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authJwtcookieLogoutApiV1AuthJwtLogoutPost>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authJwtcookieLogoutApiV1AuthJwtLogoutPost>>, void> = () => {
          

          return  authJwtcookieLogoutApiV1AuthJwtLogoutPost(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthJwtcookieLogoutApiV1AuthJwtLogoutPostMutationResult = NonNullable<Awaited<ReturnType<typeof authJwtcookieLogoutApiV1AuthJwtLogoutPost>>>
    
    export type AuthJwtcookieLogoutApiV1AuthJwtLogoutPostMutationError = ErrorType<void>

    /**
 * @summary Auth:Jwtcookie.Logout
 */
export const useAuthJwtcookieLogoutApiV1AuthJwtLogoutPost = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authJwtcookieLogoutApiV1AuthJwtLogoutPost>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof authJwtcookieLogoutApiV1AuthJwtLogoutPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthJwtcookieLogoutApiV1AuthJwtLogoutPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Register:Register
 */
export const registerRegisterApiV1AuthRegisterPost = (
    userCreate: UserCreate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserRead>(
      {url: `/api/v1/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreate
    },
      options);
    }
  


export const getRegisterRegisterApiV1AuthRegisterPostMutationOptions = <TError = ErrorType<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerRegisterApiV1AuthRegisterPost>>, TError,{data: UserCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerRegisterApiV1AuthRegisterPost>>, TError,{data: UserCreate}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerRegisterApiV1AuthRegisterPost>>, {data: UserCreate}> = (props) => {
          const {data} = props ?? {};

          return  registerRegisterApiV1AuthRegisterPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterRegisterApiV1AuthRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerRegisterApiV1AuthRegisterPost>>>
    export type RegisterRegisterApiV1AuthRegisterPostMutationBody = UserCreate
    export type RegisterRegisterApiV1AuthRegisterPostMutationError = ErrorType<ErrorModel | HTTPValidationError>

    /**
 * @summary Register:Register
 */
export const useRegisterRegisterApiV1AuthRegisterPost = <TError = ErrorType<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerRegisterApiV1AuthRegisterPost>>, TError,{data: UserCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof registerRegisterApiV1AuthRegisterPost>>,
        TError,
        {data: UserCreate},
        TContext
      > => {

      const mutationOptions = getRegisterRegisterApiV1AuthRegisterPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Reset:Forgot Password
 */
export const resetForgotPasswordApiV1AuthForgotPasswordPost = (
    bodyResetForgotPasswordApiV1AuthForgotPasswordPost: BodyResetForgotPasswordApiV1AuthForgotPasswordPost,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/api/v1/auth/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodyResetForgotPasswordApiV1AuthForgotPasswordPost
    },
      options);
    }
  


export const getResetForgotPasswordApiV1AuthForgotPasswordPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetForgotPasswordApiV1AuthForgotPasswordPost>>, TError,{data: BodyResetForgotPasswordApiV1AuthForgotPasswordPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof resetForgotPasswordApiV1AuthForgotPasswordPost>>, TError,{data: BodyResetForgotPasswordApiV1AuthForgotPasswordPost}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetForgotPasswordApiV1AuthForgotPasswordPost>>, {data: BodyResetForgotPasswordApiV1AuthForgotPasswordPost}> = (props) => {
          const {data} = props ?? {};

          return  resetForgotPasswordApiV1AuthForgotPasswordPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetForgotPasswordApiV1AuthForgotPasswordPostMutationResult = NonNullable<Awaited<ReturnType<typeof resetForgotPasswordApiV1AuthForgotPasswordPost>>>
    export type ResetForgotPasswordApiV1AuthForgotPasswordPostMutationBody = BodyResetForgotPasswordApiV1AuthForgotPasswordPost
    export type ResetForgotPasswordApiV1AuthForgotPasswordPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Reset:Forgot Password
 */
export const useResetForgotPasswordApiV1AuthForgotPasswordPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetForgotPasswordApiV1AuthForgotPasswordPost>>, TError,{data: BodyResetForgotPasswordApiV1AuthForgotPasswordPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof resetForgotPasswordApiV1AuthForgotPasswordPost>>,
        TError,
        {data: BodyResetForgotPasswordApiV1AuthForgotPasswordPost},
        TContext
      > => {

      const mutationOptions = getResetForgotPasswordApiV1AuthForgotPasswordPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Reset:Reset Password
 */
export const resetResetPasswordApiV1AuthResetPasswordPost = (
    bodyResetResetPasswordApiV1AuthResetPasswordPost: BodyResetResetPasswordApiV1AuthResetPasswordPost,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/api/v1/auth/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodyResetResetPasswordApiV1AuthResetPasswordPost
    },
      options);
    }
  


export const getResetResetPasswordApiV1AuthResetPasswordPostMutationOptions = <TError = ErrorType<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetResetPasswordApiV1AuthResetPasswordPost>>, TError,{data: BodyResetResetPasswordApiV1AuthResetPasswordPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof resetResetPasswordApiV1AuthResetPasswordPost>>, TError,{data: BodyResetResetPasswordApiV1AuthResetPasswordPost}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetResetPasswordApiV1AuthResetPasswordPost>>, {data: BodyResetResetPasswordApiV1AuthResetPasswordPost}> = (props) => {
          const {data} = props ?? {};

          return  resetResetPasswordApiV1AuthResetPasswordPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetResetPasswordApiV1AuthResetPasswordPostMutationResult = NonNullable<Awaited<ReturnType<typeof resetResetPasswordApiV1AuthResetPasswordPost>>>
    export type ResetResetPasswordApiV1AuthResetPasswordPostMutationBody = BodyResetResetPasswordApiV1AuthResetPasswordPost
    export type ResetResetPasswordApiV1AuthResetPasswordPostMutationError = ErrorType<ErrorModel | HTTPValidationError>

    /**
 * @summary Reset:Reset Password
 */
export const useResetResetPasswordApiV1AuthResetPasswordPost = <TError = ErrorType<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetResetPasswordApiV1AuthResetPasswordPost>>, TError,{data: BodyResetResetPasswordApiV1AuthResetPasswordPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof resetResetPasswordApiV1AuthResetPasswordPost>>,
        TError,
        {data: BodyResetResetPasswordApiV1AuthResetPasswordPost},
        TContext
      > => {

      const mutationOptions = getResetResetPasswordApiV1AuthResetPasswordPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Verify:Request-Token
 */
export const verifyRequestTokenApiV1AuthRequestVerifyTokenPost = (
    bodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost: BodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/api/v1/auth/request-verify-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost
    },
      options);
    }
  


export const getVerifyRequestTokenApiV1AuthRequestVerifyTokenPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyRequestTokenApiV1AuthRequestVerifyTokenPost>>, TError,{data: BodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof verifyRequestTokenApiV1AuthRequestVerifyTokenPost>>, TError,{data: BodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyRequestTokenApiV1AuthRequestVerifyTokenPost>>, {data: BodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost}> = (props) => {
          const {data} = props ?? {};

          return  verifyRequestTokenApiV1AuthRequestVerifyTokenPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyRequestTokenApiV1AuthRequestVerifyTokenPostMutationResult = NonNullable<Awaited<ReturnType<typeof verifyRequestTokenApiV1AuthRequestVerifyTokenPost>>>
    export type VerifyRequestTokenApiV1AuthRequestVerifyTokenPostMutationBody = BodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost
    export type VerifyRequestTokenApiV1AuthRequestVerifyTokenPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Verify:Request-Token
 */
export const useVerifyRequestTokenApiV1AuthRequestVerifyTokenPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyRequestTokenApiV1AuthRequestVerifyTokenPost>>, TError,{data: BodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof verifyRequestTokenApiV1AuthRequestVerifyTokenPost>>,
        TError,
        {data: BodyVerifyRequestTokenApiV1AuthRequestVerifyTokenPost},
        TContext
      > => {

      const mutationOptions = getVerifyRequestTokenApiV1AuthRequestVerifyTokenPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Verify:Verify
 */
export const verifyVerifyApiV1AuthVerifyPost = (
    bodyVerifyVerifyApiV1AuthVerifyPost: BodyVerifyVerifyApiV1AuthVerifyPost,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserRead>(
      {url: `/api/v1/auth/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodyVerifyVerifyApiV1AuthVerifyPost
    },
      options);
    }
  


export const getVerifyVerifyApiV1AuthVerifyPostMutationOptions = <TError = ErrorType<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyVerifyApiV1AuthVerifyPost>>, TError,{data: BodyVerifyVerifyApiV1AuthVerifyPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof verifyVerifyApiV1AuthVerifyPost>>, TError,{data: BodyVerifyVerifyApiV1AuthVerifyPost}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyVerifyApiV1AuthVerifyPost>>, {data: BodyVerifyVerifyApiV1AuthVerifyPost}> = (props) => {
          const {data} = props ?? {};

          return  verifyVerifyApiV1AuthVerifyPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyVerifyApiV1AuthVerifyPostMutationResult = NonNullable<Awaited<ReturnType<typeof verifyVerifyApiV1AuthVerifyPost>>>
    export type VerifyVerifyApiV1AuthVerifyPostMutationBody = BodyVerifyVerifyApiV1AuthVerifyPost
    export type VerifyVerifyApiV1AuthVerifyPostMutationError = ErrorType<ErrorModel | HTTPValidationError>

    /**
 * @summary Verify:Verify
 */
export const useVerifyVerifyApiV1AuthVerifyPost = <TError = ErrorType<ErrorModel | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyVerifyApiV1AuthVerifyPost>>, TError,{data: BodyVerifyVerifyApiV1AuthVerifyPost}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof verifyVerifyApiV1AuthVerifyPost>>,
        TError,
        {data: BodyVerifyVerifyApiV1AuthVerifyPost},
        TContext
      > => {

      const mutationOptions = getVerifyVerifyApiV1AuthVerifyPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Oauth:Google.Jwtcookie.Authorize
 */
export const oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet = (
    params?: OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OAuth2AuthorizeResponse>(
      {url: `/api/v1/auth/google/authorize`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetQueryKey = (params?: OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetParams,) => {
    return [`/api/v1/auth/google/authorize`, ...(params ? [params]: [])] as const;
    }

    
export const getOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetQueryOptions = <TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError = ErrorType<HTTPValidationError>>(params?: OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>> = ({ signal }) => oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetQueryResult = NonNullable<Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>>
export type OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetQueryError = ErrorType<HTTPValidationError>


export function useOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet<TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet<TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet<TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Oauth:Google.Jwtcookie.Authorize
 */

export function useOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet<TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: OauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * The response varies based on the authentication backend used.
 * @summary Oauth:Google.Jwtcookie.Callback
 */
export const oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet = (
    params?: OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/v1/auth/google/callback`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetQueryKey = (params?: OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetParams,) => {
    return [`/api/v1/auth/google/callback`, ...(params ? [params]: [])] as const;
    }

    
export const getOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetQueryOptions = <TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError = ErrorType<ErrorModel | HTTPValidationError>>(params?: OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>> = ({ signal }) => oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError, TData> & { queryKey: QueryKey }
}

export type OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetQueryResult = NonNullable<Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>>
export type OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetQueryError = ErrorType<ErrorModel | HTTPValidationError>


export function useOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet<TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError = ErrorType<ErrorModel | HTTPValidationError>>(
 params: undefined |  OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet<TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError = ErrorType<ErrorModel | HTTPValidationError>>(
 params?: OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet<TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError = ErrorType<ErrorModel | HTTPValidationError>>(
 params?: OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Oauth:Google.Jwtcookie.Callback
 */

export function useOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet<TData = Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError = ErrorType<ErrorModel | HTTPValidationError>>(
 params?: OauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



