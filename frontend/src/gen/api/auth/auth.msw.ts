/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  OAuth2AuthorizeResponse,
  UserRead
} from '../../model'

export const getRegisterRegisterApiV1AuthRegisterPostResponseMock = (overrideResponse: Partial< UserRead > = {}): UserRead => ({email: faker.internet.email(), id: faker.string.uuid(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_verified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getVerifyVerifyApiV1AuthVerifyPostResponseMock = (overrideResponse: Partial< UserRead > = {}): UserRead => ({email: faker.internet.email(), id: faker.string.uuid(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_verified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetResponseMock = (overrideResponse: Partial< OAuth2AuthorizeResponse > = {}): OAuth2AuthorizeResponse => ({authorization_url: faker.word.sample(), ...overrideResponse})


export const getAuthJwtcookieLoginApiV1AuthJwtLoginPostMockHandler = (overrideResponse?: unknown | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown | void> | unknown | void)) => {
  return http.post('*/api/v1/auth/jwt/login', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthJwtcookieLogoutApiV1AuthJwtLogoutPostMockHandler = (overrideResponse?: unknown | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown | void> | unknown | void)) => {
  return http.post('*/api/v1/auth/jwt/logout', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getRegisterRegisterApiV1AuthRegisterPostMockHandler = (overrideResponse?: UserRead | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserRead> | UserRead)) => {
  return http.post('*/api/v1/auth/register', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRegisterRegisterApiV1AuthRegisterPostResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getResetForgotPasswordApiV1AuthForgotPasswordPostMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/auth/forgot-password', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 202,
        
      })
  })
}

export const getResetResetPasswordApiV1AuthResetPasswordPostMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/auth/reset-password', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getVerifyRequestTokenApiV1AuthRequestVerifyTokenPostMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/api/v1/auth/request-verify-token', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 202,
        
      })
  })
}

export const getVerifyVerifyApiV1AuthVerifyPostMockHandler = (overrideResponse?: UserRead | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserRead> | UserRead)) => {
  return http.post('*/api/v1/auth/verify', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVerifyVerifyApiV1AuthVerifyPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetMockHandler = (overrideResponse?: OAuth2AuthorizeResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<OAuth2AuthorizeResponse> | OAuth2AuthorizeResponse)) => {
  return http.get('*/api/v1/auth/google/authorize', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/auth/google/callback', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getAuthMock = () => [
  getAuthJwtcookieLoginApiV1AuthJwtLoginPostMockHandler(),
  getAuthJwtcookieLogoutApiV1AuthJwtLogoutPostMockHandler(),
  getRegisterRegisterApiV1AuthRegisterPostMockHandler(),
  getResetForgotPasswordApiV1AuthForgotPasswordPostMockHandler(),
  getResetResetPasswordApiV1AuthResetPasswordPostMockHandler(),
  getVerifyRequestTokenApiV1AuthRequestVerifyTokenPostMockHandler(),
  getVerifyVerifyApiV1AuthVerifyPostMockHandler(),
  getOauthGoogleJwtcookieAuthorizeApiV1AuthGoogleAuthorizeGetMockHandler(),
  getOauthGoogleJwtcookieCallbackApiV1AuthGoogleCallbackGetMockHandler()
]
