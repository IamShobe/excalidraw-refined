/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  CursorPageSceneSummary,
  EnrichedSceneWithRevision,
  SceneFileWithId
} from '../../model'

export const getGetScenesApiV1ScenesGetResponseMock = (overrideResponse: Partial< CursorPageSceneSummary > = {}): CursorPageSceneSummary => ({count: faker.number.int({min: undefined, max: undefined}), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: `${faker.date.past().toISOString().split('.')[0]}Z`, description: faker.word.sample(), id: faker.word.sample(), last_updated: `${faker.date.past().toISOString().split('.')[0]}Z`, name: faker.word.sample(), picture: faker.word.sample(), revision_id: faker.word.sample()})), limit: faker.number.int({min: undefined, max: undefined}), next_cursor: faker.helpers.arrayElement([faker.word.sample(),null]), total: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getCreateSceneApiV1ScenesPostResponseMock = (overrideResponse: Partial< EnrichedSceneWithRevision > = {}): EnrichedSceneWithRevision => ({data: faker.word.sample(), description: faker.word.sample(), files_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), id: faker.word.sample(), name: faker.word.sample(), picture: faker.word.sample(), revision_id: faker.word.sample(), ...overrideResponse})

export const getGetSceneApiV1ScenesSceneIdGetResponseMock = (overrideResponse: Partial< EnrichedSceneWithRevision > = {}): EnrichedSceneWithRevision => ({data: faker.word.sample(), description: faker.word.sample(), files_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), id: faker.word.sample(), name: faker.word.sample(), picture: faker.word.sample(), revision_id: faker.word.sample(), ...overrideResponse})

export const getUpdateSceneApiV1ScenesSceneIdPutResponseMock = (overrideResponse: Partial< EnrichedSceneWithRevision > = {}): EnrichedSceneWithRevision => ({data: faker.word.sample(), description: faker.word.sample(), files_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), id: faker.word.sample(), name: faker.word.sample(), picture: faker.word.sample(), revision_id: faker.word.sample(), ...overrideResponse})

export const getAddSceneFileApiV1SceneFilesPostResponseMock = (overrideResponse: Partial< SceneFileWithId > = {}): SceneFileWithId => ({data: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getGetSceneFileApiV1SceneFilesFileIdGetResponseMock = (overrideResponse: Partial< SceneFileWithId > = {}): SceneFileWithId => ({data: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})


export const getGetScenesApiV1ScenesGetMockHandler = (overrideResponse?: CursorPageSceneSummary | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CursorPageSceneSummary> | CursorPageSceneSummary)) => {
  return http.get('*/api/v1/scenes/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetScenesApiV1ScenesGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateSceneApiV1ScenesPostMockHandler = (overrideResponse?: EnrichedSceneWithRevision | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EnrichedSceneWithRevision> | EnrichedSceneWithRevision)) => {
  return http.post('*/api/v1/scenes/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateSceneApiV1ScenesPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetSceneApiV1ScenesSceneIdGetMockHandler = (overrideResponse?: EnrichedSceneWithRevision | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EnrichedSceneWithRevision> | EnrichedSceneWithRevision)) => {
  return http.get('*/api/v1/scenes/:sceneId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetSceneApiV1ScenesSceneIdGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateSceneApiV1ScenesSceneIdPutMockHandler = (overrideResponse?: EnrichedSceneWithRevision | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<EnrichedSceneWithRevision> | EnrichedSceneWithRevision)) => {
  return http.put('*/api/v1/scenes/:sceneId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateSceneApiV1ScenesSceneIdPutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteSceneApiV1ScenesSceneIdDeleteMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/api/v1/scenes/:sceneId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAddSceneFileApiV1SceneFilesPostMockHandler = (overrideResponse?: SceneFileWithId | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SceneFileWithId> | SceneFileWithId)) => {
  return http.post('*/api/v1/scene-files/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddSceneFileApiV1SceneFilesPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetSceneFileApiV1SceneFilesFileIdGetMockHandler = (overrideResponse?: SceneFileWithId | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SceneFileWithId> | SceneFileWithId)) => {
  return http.get('*/api/v1/scene-files/:fileId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetSceneFileApiV1SceneFilesFileIdGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProtectedApiV1ProtectedGetMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/api/v1/protected', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getHelloGetMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getDefaultMock = () => [
  getGetScenesApiV1ScenesGetMockHandler(),
  getCreateSceneApiV1ScenesPostMockHandler(),
  getGetSceneApiV1ScenesSceneIdGetMockHandler(),
  getUpdateSceneApiV1ScenesSceneIdPutMockHandler(),
  getDeleteSceneApiV1ScenesSceneIdDeleteMockHandler(),
  getAddSceneFileApiV1SceneFilesPostMockHandler(),
  getGetSceneFileApiV1SceneFilesFileIdGetMockHandler(),
  getProtectedApiV1ProtectedGetMockHandler(),
  getHelloGetMockHandler()
]
