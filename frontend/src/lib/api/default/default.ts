/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AddSceneFileApiV1SceneFilesPostParams,
  BaseSceneWithRevision,
  CursorPageSceneSummary,
  EnrichedSceneWithRevision,
  GetScenesApiV1ScenesGetParams,
  HTTPValidationError,
  SceneFile,
  SceneFileWithId
} from '../../../model'



/**
 * @summary Get Scenes
 */
export const getScenesApiV1ScenesGet = (
    params?: GetScenesApiV1ScenesGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CursorPageSceneSummary>> => {
    
    return axios.default.get(
      `/api/v1/scenes/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetScenesApiV1ScenesGetQueryKey = (params?: GetScenesApiV1ScenesGetParams,) => {
    return [`/api/v1/scenes/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetScenesApiV1ScenesGetInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, GetScenesApiV1ScenesGetParams['cursor']>, TError = AxiosError<HTTPValidationError>>(params?: GetScenesApiV1ScenesGetParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData, Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, QueryKey, GetScenesApiV1ScenesGetParams['cursor']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetScenesApiV1ScenesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, QueryKey, GetScenesApiV1ScenesGetParams['cursor']> = ({ signal, pageParam }) => getScenesApiV1ScenesGet({...params, cursor: pageParam || params?.['cursor']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData, Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, QueryKey, GetScenesApiV1ScenesGetParams['cursor']> & { queryKey: QueryKey }
}

export type GetScenesApiV1ScenesGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>>
export type GetScenesApiV1ScenesGetInfiniteQueryError = AxiosError<HTTPValidationError>


export function useGetScenesApiV1ScenesGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, GetScenesApiV1ScenesGetParams['cursor']>, TError = AxiosError<HTTPValidationError>>(
 params: undefined |  GetScenesApiV1ScenesGetParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData, Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, QueryKey, GetScenesApiV1ScenesGetParams['cursor']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScenesApiV1ScenesGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, GetScenesApiV1ScenesGetParams['cursor']>, TError = AxiosError<HTTPValidationError>>(
 params?: GetScenesApiV1ScenesGetParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData, Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, QueryKey, GetScenesApiV1ScenesGetParams['cursor']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScenesApiV1ScenesGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, GetScenesApiV1ScenesGetParams['cursor']>, TError = AxiosError<HTTPValidationError>>(
 params?: GetScenesApiV1ScenesGetParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData, Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, QueryKey, GetScenesApiV1ScenesGetParams['cursor']>>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Scenes
 */

export function useGetScenesApiV1ScenesGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, GetScenesApiV1ScenesGetParams['cursor']>, TError = AxiosError<HTTPValidationError>>(
 params?: GetScenesApiV1ScenesGetParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData, Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, QueryKey, GetScenesApiV1ScenesGetParams['cursor']>>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetScenesApiV1ScenesGetInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetScenesApiV1ScenesGetQueryOptions = <TData = Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError = AxiosError<HTTPValidationError>>(params?: GetScenesApiV1ScenesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetScenesApiV1ScenesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>> = ({ signal }) => getScenesApiV1ScenesGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetScenesApiV1ScenesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>>
export type GetScenesApiV1ScenesGetQueryError = AxiosError<HTTPValidationError>


export function useGetScenesApiV1ScenesGet<TData = Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError = AxiosError<HTTPValidationError>>(
 params: undefined |  GetScenesApiV1ScenesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScenesApiV1ScenesGet<TData = Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: GetScenesApiV1ScenesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScenesApiV1ScenesGet<TData = Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: GetScenesApiV1ScenesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Scenes
 */

export function useGetScenesApiV1ScenesGet<TData = Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: GetScenesApiV1ScenesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getScenesApiV1ScenesGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetScenesApiV1ScenesGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Scene
 */
export const createSceneApiV1ScenesPost = (
    baseSceneWithRevision: BaseSceneWithRevision, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EnrichedSceneWithRevision>> => {
    
    return axios.default.post(
      `/api/v1/scenes/`,
      baseSceneWithRevision,options
    );
  }



export const getCreateSceneApiV1ScenesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSceneApiV1ScenesPost>>, TError,{data: BaseSceneWithRevision}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createSceneApiV1ScenesPost>>, TError,{data: BaseSceneWithRevision}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSceneApiV1ScenesPost>>, {data: BaseSceneWithRevision}> = (props) => {
          const {data} = props ?? {};

          return  createSceneApiV1ScenesPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateSceneApiV1ScenesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createSceneApiV1ScenesPost>>>
    export type CreateSceneApiV1ScenesPostMutationBody = BaseSceneWithRevision
    export type CreateSceneApiV1ScenesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Scene
 */
export const useCreateSceneApiV1ScenesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSceneApiV1ScenesPost>>, TError,{data: BaseSceneWithRevision}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createSceneApiV1ScenesPost>>,
        TError,
        {data: BaseSceneWithRevision},
        TContext
      > => {

      const mutationOptions = getCreateSceneApiV1ScenesPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Scene
 */
export const getSceneApiV1ScenesSceneIdGet = (
    sceneId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EnrichedSceneWithRevision>> => {
    
    return axios.default.get(
      `/api/v1/scenes/${sceneId}`,options
    );
  }


export const getGetSceneApiV1ScenesSceneIdGetQueryKey = (sceneId: string,) => {
    return [`/api/v1/scenes/${sceneId}`] as const;
    }

    
export const getGetSceneApiV1ScenesSceneIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError = AxiosError<HTTPValidationError>>(sceneId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSceneApiV1ScenesSceneIdGetQueryKey(sceneId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>> = ({ signal }) => getSceneApiV1ScenesSceneIdGet(sceneId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(sceneId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSceneApiV1ScenesSceneIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>>
export type GetSceneApiV1ScenesSceneIdGetQueryError = AxiosError<HTTPValidationError>


export function useGetSceneApiV1ScenesSceneIdGet<TData = Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError = AxiosError<HTTPValidationError>>(
 sceneId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSceneApiV1ScenesSceneIdGet<TData = Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError = AxiosError<HTTPValidationError>>(
 sceneId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSceneApiV1ScenesSceneIdGet<TData = Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError = AxiosError<HTTPValidationError>>(
 sceneId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Scene
 */

export function useGetSceneApiV1ScenesSceneIdGet<TData = Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError = AxiosError<HTTPValidationError>>(
 sceneId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneApiV1ScenesSceneIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetSceneApiV1ScenesSceneIdGetQueryOptions(sceneId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Scene
 */
export const updateSceneApiV1ScenesSceneIdPut = (
    sceneId: string,
    baseSceneWithRevision: BaseSceneWithRevision, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EnrichedSceneWithRevision>> => {
    
    return axios.default.put(
      `/api/v1/scenes/${sceneId}`,
      baseSceneWithRevision,options
    );
  }



export const getUpdateSceneApiV1ScenesSceneIdPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSceneApiV1ScenesSceneIdPut>>, TError,{sceneId: string;data: BaseSceneWithRevision}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateSceneApiV1ScenesSceneIdPut>>, TError,{sceneId: string;data: BaseSceneWithRevision}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSceneApiV1ScenesSceneIdPut>>, {sceneId: string;data: BaseSceneWithRevision}> = (props) => {
          const {sceneId,data} = props ?? {};

          return  updateSceneApiV1ScenesSceneIdPut(sceneId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSceneApiV1ScenesSceneIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateSceneApiV1ScenesSceneIdPut>>>
    export type UpdateSceneApiV1ScenesSceneIdPutMutationBody = BaseSceneWithRevision
    export type UpdateSceneApiV1ScenesSceneIdPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Scene
 */
export const useUpdateSceneApiV1ScenesSceneIdPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSceneApiV1ScenesSceneIdPut>>, TError,{sceneId: string;data: BaseSceneWithRevision}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updateSceneApiV1ScenesSceneIdPut>>,
        TError,
        {sceneId: string;data: BaseSceneWithRevision},
        TContext
      > => {

      const mutationOptions = getUpdateSceneApiV1ScenesSceneIdPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Scene
 */
export const deleteSceneApiV1ScenesSceneIdDelete = (
    sceneId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.default.delete(
      `/api/v1/scenes/${sceneId}`,options
    );
  }



export const getDeleteSceneApiV1ScenesSceneIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSceneApiV1ScenesSceneIdDelete>>, TError,{sceneId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSceneApiV1ScenesSceneIdDelete>>, TError,{sceneId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSceneApiV1ScenesSceneIdDelete>>, {sceneId: string}> = (props) => {
          const {sceneId} = props ?? {};

          return  deleteSceneApiV1ScenesSceneIdDelete(sceneId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSceneApiV1ScenesSceneIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSceneApiV1ScenesSceneIdDelete>>>
    
    export type DeleteSceneApiV1ScenesSceneIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Scene
 */
export const useDeleteSceneApiV1ScenesSceneIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSceneApiV1ScenesSceneIdDelete>>, TError,{sceneId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSceneApiV1ScenesSceneIdDelete>>,
        TError,
        {sceneId: string},
        TContext
      > => {

      const mutationOptions = getDeleteSceneApiV1ScenesSceneIdDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Add Scene File
 */
export const addSceneFileApiV1SceneFilesPost = (
    sceneFile: SceneFile,
    params: AddSceneFileApiV1SceneFilesPostParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SceneFileWithId>> => {
    
    return axios.default.post(
      `/api/v1/scene-files/`,
      sceneFile,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getAddSceneFileApiV1SceneFilesPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addSceneFileApiV1SceneFilesPost>>, TError,{data: SceneFile;params: AddSceneFileApiV1SceneFilesPostParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addSceneFileApiV1SceneFilesPost>>, TError,{data: SceneFile;params: AddSceneFileApiV1SceneFilesPostParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addSceneFileApiV1SceneFilesPost>>, {data: SceneFile;params: AddSceneFileApiV1SceneFilesPostParams}> = (props) => {
          const {data,params} = props ?? {};

          return  addSceneFileApiV1SceneFilesPost(data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddSceneFileApiV1SceneFilesPostMutationResult = NonNullable<Awaited<ReturnType<typeof addSceneFileApiV1SceneFilesPost>>>
    export type AddSceneFileApiV1SceneFilesPostMutationBody = SceneFile
    export type AddSceneFileApiV1SceneFilesPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Add Scene File
 */
export const useAddSceneFileApiV1SceneFilesPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addSceneFileApiV1SceneFilesPost>>, TError,{data: SceneFile;params: AddSceneFileApiV1SceneFilesPostParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof addSceneFileApiV1SceneFilesPost>>,
        TError,
        {data: SceneFile;params: AddSceneFileApiV1SceneFilesPostParams},
        TContext
      > => {

      const mutationOptions = getAddSceneFileApiV1SceneFilesPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Scene File
 */
export const getSceneFileApiV1SceneFilesFileIdGet = (
    fileId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SceneFileWithId>> => {
    
    return axios.default.get(
      `/api/v1/scene-files/${fileId}`,options
    );
  }


export const getGetSceneFileApiV1SceneFilesFileIdGetQueryKey = (fileId: string,) => {
    return [`/api/v1/scene-files/${fileId}`] as const;
    }

    
export const getGetSceneFileApiV1SceneFilesFileIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError = AxiosError<HTTPValidationError>>(fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSceneFileApiV1SceneFilesFileIdGetQueryKey(fileId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>> = ({ signal }) => getSceneFileApiV1SceneFilesFileIdGet(fileId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(fileId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSceneFileApiV1SceneFilesFileIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>>
export type GetSceneFileApiV1SceneFilesFileIdGetQueryError = AxiosError<HTTPValidationError>


export function useGetSceneFileApiV1SceneFilesFileIdGet<TData = Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError = AxiosError<HTTPValidationError>>(
 fileId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSceneFileApiV1SceneFilesFileIdGet<TData = Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError = AxiosError<HTTPValidationError>>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSceneFileApiV1SceneFilesFileIdGet<TData = Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError = AxiosError<HTTPValidationError>>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Scene File
 */

export function useGetSceneFileApiV1SceneFilesFileIdGet<TData = Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError = AxiosError<HTTPValidationError>>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSceneFileApiV1SceneFilesFileIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetSceneFileApiV1SceneFilesFileIdGetQueryOptions(fileId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Protected
 */
export const protectedApiV1ProtectedGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.default.get(
      `/api/v1/protected`,options
    );
  }


export const getProtectedApiV1ProtectedGetQueryKey = () => {
    return [`/api/v1/protected`] as const;
    }

    
export const getProtectedApiV1ProtectedGetQueryOptions = <TData = Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProtectedApiV1ProtectedGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>> = ({ signal }) => protectedApiV1ProtectedGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ProtectedApiV1ProtectedGetQueryResult = NonNullable<Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>>
export type ProtectedApiV1ProtectedGetQueryError = AxiosError<unknown>


export function useProtectedApiV1ProtectedGet<TData = Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useProtectedApiV1ProtectedGet<TData = Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useProtectedApiV1ProtectedGet<TData = Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Protected
 */

export function useProtectedApiV1ProtectedGet<TData = Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof protectedApiV1ProtectedGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getProtectedApiV1ProtectedGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Hello
 */
export const helloGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.default.get(
      `/`,options
    );
  }


export const getHelloGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getHelloGetQueryOptions = <TData = Awaited<ReturnType<typeof helloGet>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHelloGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof helloGet>>> = ({ signal }) => helloGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof helloGet>>, TError, TData> & { queryKey: QueryKey }
}

export type HelloGetQueryResult = NonNullable<Awaited<ReturnType<typeof helloGet>>>
export type HelloGetQueryError = AxiosError<unknown>


export function useHelloGet<TData = Awaited<ReturnType<typeof helloGet>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloGet<TData = Awaited<ReturnType<typeof helloGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloGet<TData = Awaited<ReturnType<typeof helloGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Hello
 */

export function useHelloGet<TData = Awaited<ReturnType<typeof helloGet>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getHelloGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



